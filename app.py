import streamlit as st
import plotly.graph_objects as go
import numpy as np

st.set_page_config(
   layout="wide", page_title="Carbon Calculator")

st.title("Carbon Calculator")

st.markdown('This page can be used to _estimate_ the reduction in CO2 created by leveraging virtulisation vs physical server deployments.')
st.markdown('Simply add values following the guidance on the page')

st.header("**General Infrastructure Information**")
colServer, colkWh, colco2kWh = st.columns(3)

with colServer:
   Servers = st.number_input("Number of Servers, virtual and physical discounting ESXi hosts:", min_value=1.0, format='%f')
with colkWh:
   kWhRate = st.number_input("Estimated kWh per physical server per year: ", min_value=0.0, format='%f')
with colco2kWh:
   co2kWh = st.number_input("Assumed CO2e per kWh (kg): ", min_value=0.0, format='%f')

st.markdown('_Power consumption of a small server (1 socket, 10 cores, 32 GB RAM) = 0.1 KW; NB = 0.1x24x365 = 876_')
st.markdown('_CO2 emission per KWh = 0.709 Kg. Reference values from [Greenhouse Gas Equivalencies Calculator](https://www.epa.gov/energy/greenhouse-gas-equivalencies-calculator)_')


KG_CO2_No_Virtulisation = (Servers * kWhRate * co2kWh)
st.write(KG_CO2_No_Virtulisation, "KGs of C02 generated without VMware virtualisation")

st.header("**VMware Infrastructure Information**")
colRatio, colESXi, colkWhESXi = st.columns(3)

with colRatio:
   Ratio = st.number_input("VM:Host Consolidation Ratio: ", min_value=0.0,format='%f' )

with colESXi:
   ESXi = st.number_input("Number of ESXi Hosts: ", min_value=0.0,format='%f' )

with colkWhESXi:
   kWhESXI = st.number_input("Typical kWh per ESXi Host per year: ", min_value=0.0,format='%f' )

st.markdown('_Power consumption of a Dell PowerEdge R720 ESXi server = 0.302 KW; NB = 0.302x24x365 = 2646_')

KG_CO2_ESXi = (co2kWh * ESXi * kWhESXI)
st.write(KG_CO2_ESXi, "KGs of CO2 generated by ESXi Hosts")

MT_CO2_Saved = (KG_CO2_No_Virtulisation-KG_CO2_ESXi)

st.write(MT_CO2_Saved, "KGs of CO2 avoided through VMware virtualisation")

KG_CO2_Miles = 2.5
Miles_Avoided = MT_CO2_Saved*KG_CO2_Miles

st.write("Which is the equivalent of avoiding", Miles_Avoided, "miles driven by an average gasoline-powered passenger vehicle")

Dist_to_Moon = 477710 
Moon_Trips_Avoided = Miles_Avoided / Dist_to_Moon

st.write("Or the equivalent of", Moon_Trips_Avoided, "round trips to the moon")

st.header("**Forecasting Carbon Usage**")
colForecast1, colForecast2 = st.columns(2)

st.markdown('For historical analysis, adjust values in general and VMware infrastructure sections above according to the desired starting year')

with colForecast1:
    st.subheader("Forecast Years")
    forecast_year = st.number_input("Enter number of years for forecast (Min 1 year): ", min_value=1,format='%d')
    forecast_months = 12 * forecast_year 
    
    st.subheader("Forecast for Annual Server Growth Rate")
    annual_growth = st.number_input("Enter annual forecast growth rate (%): ", min_value=0.0,format='%f')
    monthly_growth = (1+annual_growth)**(1/12) - 1
    cumulative_growth_forecast = np.cumprod(np.repeat(1 + monthly_growth, forecast_months))

    forecastServers = Servers * cumulative_growth_forecast
    forecastCarbon = forecastServers * kWhRate * co2kWh

    forecastESXis = forecastServers / Ratio
    forecastESXiCarbon = co2kWh * forecastESXis * kWhESXI

chartESXi = np.cumsum(forecastESXiCarbon)
chartServers = np.cumsum(forecastCarbon)

x_values = np.arange(forecast_year + 1)


fig = go.Figure()
fig.add_trace(
        go.Scatter(
            x=x_values, 
            y=chartServers,
            name="Forecasted Carbon Non-Virtualised"
        )
    )
 
fig.add_trace(
        go.Scatter(
            x=x_values,
            y=chartESXi,
            name= "Forecasted Carbon Virtualised"
        )
    )

fig.update_layout(title='Forecast Carbon Consumption, Virtualisation vs Non-Virtualisation',
                   xaxis_title='Year',
                   yaxis_title='Carbon KGs')

st.plotly_chart(fig, use_container_width=True)

st.markdown('To save the values in this report for reference - **Print as a PDF**')

